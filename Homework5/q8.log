Script started on 2025-03-13 03:06:53+00:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="311" LINES="23"]
[0;32m@Zephrnos [0mâžœ [1;34m/workspaces/csci-330-homeworks-Zephrnos/Homework5 [0;36m([1;31mmain[0;36m) [0m$ cat q8.;[Klisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Parser Implementation with Error Reporting  ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar *tokens* nil)
(defvar *lookahead* nil)
(defvar *position* 1)  ; Keeps track of the current token position

(defun init-parser (tokens)
  (setf *tokens* tokens)
  (setf *position* 1)
  (if tokens
      (setf *lookahead* (car tokens))
      (setf *lookahead* nil)))

(defun consume (expected)
  (if (eq *lookahead* expected)
      (progn
        (incf *position*)
        (setf *tokens* (cdr *tokens*))
        (setf *lookahead* (if *tokens* (car *tokens*) nil)))
      (error "Unexpected symbol '~A' at position ~A: expected '~A'" 
             *lookahead* *position* expected)))

;;; Grammar (Left-Factored):
;;; I  â†’ i E S Iâ€²
;;; Iâ€² â†’ e S | Îµ
;;; E  â†’ G Eâ€²
;;; Eâ€² â†’ o G Eâ€² | Îµ
;;; G  â†’ x | y | z | w
;;; S  â†’ s | d L b
;;; L  â†’ s Lâ€²
;;; Lâ€² â†’ s Lâ€² | Îµ

(defun I ()
  (if (eq *lookahead* 'i)
      (progn
        (consume 'i)
        (E)
        (S)
        (I-Prime))
      (error "Unexpected symbol '~A' at position ~A in I: expected 'i'" 
             *lookahead* *position*)))

(defun I-Prime ()
  (if (eq *lookahead* 'e)
      (progn
        (consume 'e)
        (S))
      ;; Îµ-production: do nothing.
      nil))

(defun E ()
  (if (member *lookahead* '(x y z w))
      (progn
        (G)
        (E-Prime))
      (error "Unexpected symbol '~A' at position ~A in E: expected one of 'x', 'y', 'z', or 'w'"
             *lookahead* *position*)))

(defun E-Prime ()
  (if (eq *lookahead* 'o)
      (progn
        (consume 'o)
        (G)
        (E-Prime))
      ;; Îµ-production: do nothing.
      nil))

(defun G ()
  (cond ((eq *lookahead* 'x) (consume 'x))
        ((eq *lookahead* 'y) (consume 'y))
        ((eq *lookahead* 'z) (consume 'z))
        ((eq *lookahead* 'w) (consume 'w))
        (t (error "Unexpected symbol '~A' at position ~A in G: expected one of 'x', 'y', 'z', or 'w'"
                  *lookahead* *position*))))

(defun S ()
  (cond ((eq *lookahead* 's)
         (consume 's))
        ((eq *lookahead* 'd)
         (consume 'd)
         (L)
         (if (eq *lookahead* 'b)
             (consume 'b)
             (error "Unexpected symbol '~A' at position ~A in S: expected 'b' after L" 
                    *lookahead* *position*)))
        (t (error "Unexpected symbol '~A' at position ~A in S: expected 's' or 'd'"
                  *lookahead* *position*))))

(defun L ()
  (if (eq *lookahead* 's)
      (progn
        (consume 's)
        (L-Prime))
      (error "Unexpected symbol '~A' at position ~A in L: expected 's'" 
             *lookahead* *position*)))

(defun L-Prime ()
  (if (eq *lookahead* 's)
      (progn
        (consume 's)
        (L-Prime))
      ;; Îµ-production: do nothing.
      nil))

(defun parse (tokens)
  "Main parse function. On success, prints a success message.
If an error occurs, an error is signaled with position information."
  (init-parser tokens)
  (I)
  (if *lookahead*
      (error "Unexpected symbol '~A' at position ~A: extra input after valid parse" 
             *lookahead* *position*)
      (format t "Parsing succeeded!~%")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Testing the 14 Strings from Q7              ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun run-tests ()
  (format t "### Running Valid Strings Tests ###~%")
  (dolist (test 
           '(("Valid1" (i x s e s))
             ("Valid2" (i x d s b e s))
             ("Valid3" (i z o w d s b e s))
             ("Valid4" (i y o x d s b e d s b))
             ("Valid5" (i x o y o z d s b e d s b))
             ("Valid6" (i x o z o w d s s b e d s s b))
             ("Valid7" (i w o x o y o z d s s b e d s s b))))
    (destructuring-bind (name tokens) test
      (format t "~%Test ~A with tokens: ~A~%" name tokens)
      (handler-case 
           (progn
             (parse tokens)
             (format t "Test ~A: Passed.~%" name))
        (error (e)
          (format t "Test ~A: Failed with error: ~A~%" name e)))))
  
  (format t "~%### Running Invalid Strings Tests ###~%")
  (dolist (test 
           '(("Invalid1" (i a s e s))
             ("Invalid2" (i x d x b e s))
             ("Invalid3" (i z p w d s b e s))
             ("Invalid4" (i y o x d s b e d s d))
             ("Invalid5" (i x p y o z d s b e d s b))
             ("Invalid6" (i x o z o w f s s b e d s s b))
             ("Invalid7" (j w o x o y o z d s s b e d s s b))))
    (destructuring-bind (name tokens) test
      (format t "~%Test ~A with tokens: ~A~%" name tokens)
      (handler-case 
           (progn
             (parse tokens)
             (format t "Test ~A: Passed (unexpected)!~%" name))
        (error (e)
          (format t "Test ~A: Failed as expected with error: ~A~%" name e))))))


(run-tests)[0;32m@Zephrnos [0mâžœ [1;34m/workspaces/csci-330-homeworks-Zephrnos/Homework5 [0;36m([1;31mmain[0;36m) [0m$ sbcl --script q8.k[Klisp
### Running Valid Strings Tests ###

Test Valid1 with tokens: (I X S E S)
Parsing succeeded!
Test Valid1: Passed.

Test Valid2 with tokens: (I X D S B E S)
Parsing succeeded!
Test Valid2: Passed.

Test Valid3 with tokens: (I Z O W D S B E S)
Parsing succeeded!
Test Valid3: Passed.

Test Valid4 with tokens: (I Y O X D S B E D S B)
Parsing succeeded!
Test Valid4: Passed.

Test Valid5 with tokens: (I X O Y O Z D S B E D S B)
Parsing succeeded!
Test Valid5: Passed.

Test Valid6 with tokens: (I X O Z O W D S S B E D S S B)
Parsing succeeded!
Test Valid6: Passed.

Test Valid7 with tokens: (I W O X O Y O Z D S S B E D S S B)
Parsing succeeded!
Test Valid7: Passed.

### Running Invalid Strings Tests ###

Test Invalid1 with tokens: (I A S E S)
Test Invalid1: Failed as expected with error: Unexpected symbol 'A' at position 2 in E: expected one of 'x', 'y', 'z', or 'w'

Test Invalid2 with tokens: (I X D X B E S)
Test Invalid2: Failed as expected with error: Unexpected symbol 'X' at position 4 in L: expected 's'

Test Invalid3 with tokens: (I Z P W D S B E S)
Test Invalid3: Failed as expected with error: Unexpected symbol 'P' at position 3 in S: expected 's' or 'd'

Test Invalid4 with tokens: (I Y O X D S B E D S D)
Test Invalid4: Failed as expected with error: Unexpected symbol 'D' at position 11 in S: expected 'b' after L

Test Invalid5 with tokens: (I X P Y O Z D S B E D S B)
Test Invalid5: Failed as expected with error: Unexpected symbol 'P' at position 3 in S: expected 's' or 'd'

Test Invalid6 with tokens: (I X O Z O W F S S B E D S S B)
Test Invalid6: Failed as expected with error: Unexpected symbol 'F' at position 7 in S: expected 's' or 'd'

Test Invalid7 with tokens: (J W O X O Y O Z D S S B E D S S B)
Test Invalid7: Failed as expected with error: Unexpected symbol 'J' at position 1 in I: expected 'i'
[0;32m@Zephrnos [0mâžœ [1;34m/workspaces/csci-330-homeworks-Zephrnos/Homework5 [0;36m([1;31mmain[0;36m) [0m$ exit
exit

Script done on 2025-03-13 03:07:19+00:00 [COMMAND_EXIT_CODE="0"]
