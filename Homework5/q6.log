Script started on 2025-03-13 03:06:20+00:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="311" LINES="23"]
[0;32m@Zephrnos [0mâžœ [1;34m/workspaces/csci-330-homeworks-Zephrnos/Homework5 [0;36m([1;31mmain[0;36m) [0m$ sbcl -- sc[K[K[Kscript[K[K[K[K[K[K[K[K[K[K[K[K[Kcat q6.lisp
;;; Global parser state variables.
(defvar *tokens* nil)
(defvar *lookahead* nil)

;;; Initialize the parser with a list of tokens.
(defun init-parser (tokens)
  (setf *tokens* tokens)
  (if tokens
      (setf *lookahead* (car tokens))
      (setf *lookahead* nil)))

;;; Consume the expected token and advance the lookahead.
(defun consume (expected)
  (if (eq *lookahead* expected)
      (progn
        (setf *tokens* (cdr *tokens*))
        (setf *lookahead* (if *tokens* (car *tokens*) nil)))
      (error "Parse error: Expected ~A but found ~A" expected *lookahead*)))

;;; Grammar rules implemented as functions:

;;; I  â†’ i E S Iâ€²
(defun I ()
  (if (eq *lookahead* 'i)
      (progn
        (consume 'i)
        (E)
        (S)
        (I-Prime))
      (error "Parse error in I: Expected 'i' but found ~A" *lookahead*)))

;;; Iâ€² â†’ e S | Îµ
(defun I-Prime ()
  (if (eq *lookahead* 'e)
      (progn
        (consume 'e)
        (S))
      ;; Îµ-production: do nothing.
      nil))

;;; E  â†’ G Eâ€²
(defun E ()
  (if (or (eq *lookahead* 'x)
          (eq *lookahead* 'y)
          (eq *lookahead* 'z)
          (eq *lookahead* 'w))
      (progn
        (G)
        (E-Prime))
      (error "Parse error in E: Expected one of x, y, z, or w but found ~A" *lookahead*)))

;;; Eâ€² â†’ o G Eâ€² | Îµ
(defun E-Prime ()
  (if (eq *lookahead* 'o)
      (progn
        (consume 'o)
        (G)
        (E-Prime))
      ;; Îµ-production: do nothing.
      nil))

;;; G  â†’ x | y | z | w
(defun G ()
  (cond ((eq *lookahead* 'x) (consume 'x))
        ((eq *lookahead* 'y) (consume 'y))
        ((eq *lookahead* 'z) (consume 'z))
        ((eq *lookahead* 'w) (consume 'w))
        (t (error "Parse error in G: Expected one of x, y, z, or w but found ~A" *lookahead*))))

;;; S  â†’ s | d L b
(defun S ()
  (cond ((eq *lookahead* 's)
         (consume 's))
        ((eq *lookahead* 'd)
         (consume 'd)
         (L)
         (if (eq *lookahead* 'b)
             (consume 'b)
             (error "Parse error in S: Expected 'b' after L in production S â†’ d L b")))
        (t (error "Parse error in S: Expected 's' or 'd' but found ~A" *lookahead*))))

;;; L  â†’ s Lâ€²
(defun L ()
  (if (eq *lookahead* 's)
      (progn
        (consume 's)
        (L-Prime))
      (error "Parse error in L: Expected 's' but found ~A" *lookahead*)))

;;; Lâ€² â†’ s Lâ€² | Îµ
(defun L-Prime ()
  (if (eq *lookahead* 's)
      (progn
        (consume 's)
        (L-Prime))
      ;; Îµ-production: do nothing.
      nil))

;;; Main parse function: start with I and verify all tokens are consumed.
(defun parse (tokens)
  (init-parser tokens)
  (I)
  (if *lookahead*
      (error "Parse error: Extra input after parsing")
      (format t "Parsing succeeded!~%")))
      
(parse '(i x s e s))[0;32m@Zephrnos [0mâžœ [1;34m/workspaces/csci-330-homeworks-Zephrnos/Homework5 [0;36m([1;31mmain[0;36m) [0m$ sbcl --script q6.lisp
Parsing succeeded!
[0;32m@Zephrnos [0mâžœ [1;34m/workspaces/csci-330-homeworks-Zephrnos/Homework5 [0;36m([1;31mmain[0;36m) [0m$ exit
exit

Script done on 2025-03-13 03:06:48+00:00 [COMMAND_EXIT_CODE="0"]
